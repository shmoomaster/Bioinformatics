tinytex::update_tinytex()
install.packages('tinytex')
install.packages("tinytex")
tinytex::update_tinytex()  # If using TinyTeX
tinytex::update_tinytex()
tinytex::reinstall_tinytex()
load("~/.RData")
load("C:/Users/cmfon/OneDrive/Documents/.RData")
load("~/.RData")
load("~/.RData")
load("C:/Users/cmfon/OneDrive/Documents/.RData")
setwd("~/")
setwd("D:/BioinformaticsWorkFile")
knitr::opts_chunk$set(echo = TRUE)
library(phyloseq)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("phyloseq")
library(phyloseq)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.18")
load("Rdata/taxa.RData")
setwd("D:/BioinformaticsWorkFile/DADA2/RData")
load("Rdata/taxa.RData")
setwd("D:/BioinformaticsWorkFile/DADA2")
load("Rdata/taxa.RData")
load("Rdata/taxa.RData")
load("RData/taxa.RData")
setwd("D:/BioinformaticsWorkFile/DADA2/RData")
load("RData/taxa.RData")
setwd("D:/BioinformaticsWorkFile/DADA2")
load("RData/taxa.RData")
getwd()
list.files("RData")
load("RData/taxa.RData")
load("RData/taxa.RData")
load("RData/taxa.RData")
load(load("D:/BioinformaticsWorkFile/DADA2/RData/taxa.RData")
load("D:/BioinformaticsWorkFile/DADA2/RData/taxa.RData")
file.exists("D:/BioinformaticsWorkFile/DADA2/RData/taxa.RData")
file.exists("D:/BioinformaticsWorkFile/DADA2/RData/seqtab.nochim.RData")
load(D:/BioinformaticsWorkFile/DADA2/RData/seqtab.nochim.RData")
load("RData/taxa.RData")
load("RData/taxa.RData")
load("RData/seqtab.nochim.RData")
library(phyloseq)
load("RData/taxa.RData")
load("RData/seqtab.nochim.RData")
metadata<-read.csv("metadata.csv", header=TRUE, row, names = 1)
library(phyloseq)
load("RData/taxa.RData")
load("RData/seqtab.nochim.RData")
metadata<-read.csv("metadata.csv", header=TRUE, row, names = 1)
metadata<-read.csv("metadata.csv", header=TRUE, row, names = 1)
metadata<-read.csv("metadata.csv", header=TRUE, rownames = 1)
metadata<-read.csv("metadata.csv", header=TRUE, row.names = 1)
library(phyloseq)
load("RData/taxa.RData")
load("RData/seqtab.nochim.RData")
metadata<-read.csv("metadata.csv", header=TRUE, row.names = 1)
#make sure the seqtab.nochim and taxa objects are loaded
physeq <- phyloseq(otu_table(seqtab.nochim, taxa_are_rows = FALSE),
sample_data(metadata),
tax_table(taxa))
physeq
# convert from row to abundance
physeq <- transform_sample_counts(physeq, function(abund) 1*(abund-0)
physeq
# Assuming `physeq` is already a phyloseq object
# Transform sample counts: convert all positive abundances to 1
physeq <- transform_sample_counts(physeq, function(abund) { abund > 0 })
# convert from row to abundance
physeq <- transform_sample_counts(physeq, function(abund) 1*(abund-0)
physeq
# Assuming `physeq` is already a phyloseq object
# Transform sample counts: convert all positive abundances to 1
physeq <- transform_sample_counts(physeq, function(abund) { abund > 0 })
# convert from row to abundance
physeq <- transform_sample_counts(physeq, function(abund) 1*(abund-0)
physeq
# convert from row to abundance
physeq <- transform_sample_counts(physeq, function(abund) 1*(abund>0)
physeq
# convert from row to abundance
physeq <- transform_sample_counts(physeq, function(abund) 1*(abund>0)
physeq
# Assuming `physeq` is already a phyloseq object
# Transform sample counts: convert all positive abundances to 1
physeq <- transform_sample_counts(physeq, function(abund) { 1 * (abund > 0) })
print(physeq)
# Assuming `physeq` is already a phyloseq object
# Transform sample counts: convert all positive abundances to 1
physeq <- transform_sample_counts(physeq, function(abund) { 1 * (abund > 0) })
print(physeq)
dna <- Biostrings::DNAStringSet(taxa_names(physeq)
name(dna) <- taxa_names(physeq)
dna <- Biostrings::DNAStringSet(taxa_names(physeq))
name(dna) <- taxa_names(physeq)
# Assuming `physeq` is already a phyloseq object and you have the Biostrings package loaded
# Convert taxa names to DNAStringSet
dna <- Biostrings::DNAStringSet(taxa_names(physeq))
names(dna) <- taxa_names(physeq)  # Correctly assign the names
# Assuming you want to merge this data into your phyloseq object; ensure you have a valid reason and method to do this
# If 'merge_phyloseq' does not exist as you intended, you might be looking to combine it differently.
# Here we directly replace the taxa names with "ASV" followed by a sequence number
taxa_names(physeq) <- paste0("ASV", seq_along(taxa_names(physeq)))
# Print or return the updated phyloseq object
physeq
physeq <- physeq%>% subset_taxa(Family!= "Mitochondria | is.no(Family) &
Order!="Chloroplast" | is.no(Order))
physeq <- physeq %>% subset_taxa( Family!= "Mitochondri" | is.na.(Family) &
Order!="Chloroplast" | is.no(Order))
library(phyloseq)  # Ensure the phyloseq package is loaded
library(dplyr)
physeq <- physeq %>%
subset_taxa(!(Family == "Mitochondria" | Order == "Chloroplast") | is.na(Family) | is.na(Order))
physeq
physeq<-rm_nobac(physeq)
library(phyloseq)
library(dplyr)
dna <- Biostrings::DNAStringSet(taxa_names(physeq))
# convert from row to abundance
physeq <- transform_sample_counts(physeq, function(abund) 1*(abund>0)
physeq
library(phyloseq)
library(dplyr)
load("RData/taxa.RData")
load("RData/seqtab.nochim.RData")
metadata<-read.csv("metadata.csv", header=TRUE, row.names = 1)
#make sure the seqtab.nochim and taxa objects are loaded
physeq <- phyloseq(otu_table(seqtab.nochim, taxa_are_rows = FALSE),
sample_data(metadata),
tax_table(taxa))
physeq
# convert from row to abundance
physeq <- transform_sample_counts(physeq, function(abund) 1*(abund>0))
physeq
dna <- Biostrings::DNAStringSet(taxa_names(physeq))
names(dna)<-taxa_names(physeq)
physeq <- merge_phyloseq(physeq, dna)
taxa_names(physeq) <- paste0("ASV", seq(ntaxa(physeq)))
physeq
physeq <- physeq %>% subset_taxa( Family!= "Mitochondria" | is.na(Family) &
Order!="Chloroplast" | is.na(Order))
physeq
install.packages("remotes")
remotes::install_github("peterolah001/BiMiCo")
physeq<-rm_nobac(physeq)
physeq<-rm_nonbac(physeq)
library(phyloseq)
library(dplyr)
library(BiMiCo)
physeq<-rm_nonbac(physeq)
physeq
save(physeq, file = "RData/physeq.RData")
load("RDatat/physeq.RData")
load("RData/physeq.RData")
plot_bar(physeq, fill = "Phylum") + geom_bar(aes(color-Phylum, fill-Phylum),
stat="identity", position="fill")
library(gg)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
knitr::opts_chunk$set(echo = TRUE)
plot_bar(physeq, fill = "Phylum") + geom_bar(aes(color=loylum, fill-Phylum),
stat="identity", position="fill")
# convert to relative abundance
physeq_relabund <- transform_sample_counts(physeq, function(x) x / sum(x))
#barplot
plot_bar(physeq_relabund, fill = "Phylum") + geom_bar(aes(color-Phylum,
fill=Phylum), stat="identity", position="fill") + facet_wrap(~body.site, scales
= "free")
# convert to relative abundance
physeq_relabund <- transform_sample_counts(physeq, function(x) x / sum(x))
#barplot
plot_bar(physeq_relabund, fill = "Phylum") + geom_bar(aes(color=Phylum,
fill=Phylum), stat="identity", position="fill") + facet_wrap(~body.site, scales
= "free")
plot_bar(physeq, fill = "Phylum") + geom_bar(aes(color=loylum, fill-Phylum),
stat="identity", position="fill")
library(phyloseq)
library(dplyr)
library(BiMiCo)
library(ggplot2)
setwd("D:/BioinformaticsWorkFile/DADA2")
library(phyloseq)
library(dplyr)
library(BiMiCo)
library(ggplot2)
